Metadata-Version: 2.4
Name: Claude45_Demo
Version: 0.1.0
Summary: Aker Investment Platform - Data-driven residential real estate investment screening for CO/UT/ID markets
Author-email: Aker Companies <tech@akercompanies.com>
Keywords: real estate,investment,geospatial,market analysis,risk assessment
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: geopandas
Requires-Dist: shapely
Requires-Dist: pyproj
Requires-Dist: requests
Requires-Dist: urllib3
Requires-Dist: scikit-learn
Requires-Dist: scipy
Requires-Dist: matplotlib
Requires-Dist: seaborn
Requires-Dist: click
Requires-Dist: rich
Requires-Dist: python-dotenv
Requires-Dist: pyyaml
Requires-Dist: pydantic
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: pytest-mock; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pandas-stubs; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: types-pyyaml; extra == "dev"
Provides-Extra: notebook
Requires-Dist: jupyter; extra == "notebook"
Requires-Dist: ipykernel; extra == "notebook"
Requires-Dist: ipywidgets; extra == "notebook"
Provides-Extra: all
Requires-Dist: Claude45_Demo[dev,notebook]; extra == "all"

# Aker Investment Platform

Data-driven screening and evaluation of residential real estate investments in Colorado, Utah, and Idaho.

## Overview

The Aker Investment Platform systematically analyzes submarkets based on four pillars:

- **Supply Constraints** (30%) - Permits, regulatory friction, topography
- **Innovation Employment** (30%) - Tech, healthcare, education job growth
- **Urban Convenience** (20%) - Walkability, transit, amenities
- **Outdoor Access** (20%) - Trails, ski areas, water, public lands

Plus comprehensive **risk assessment** for wildfire, flood, regulatory, and climate factors.

## Status

ðŸš§ **In Development** - OpenSpec proposal approved, ready to implement

See the complete proposal: [`openspec/changes/add-aker-investment-platform/README.md`](openspec/changes/add-aker-investment-platform/README.md)

## Quick Start

### 1. Set Up Environment

```bash
# Run automated setup
./scripts/dev_setup.sh

# Or manually:
micromamba activate ./.venv
micromamba install -p ./.venv -c conda-forge pandas geopandas numpy scikit-learn requests matplotlib seaborn pytest ruff black
```

### 2. Configure API Keys

Get free API keys and add to `.env`:

- Census API: <https://api.census.gov/data/key_signup.html>
- BLS API: <https://www.bls.gov/developers/api_signature_v2.shtml>

### 3. Start Developing

```bash
# Read the project context
cat .agentic/README.md

# View implementation tasks
cat openspec/changes/add-aker-investment-platform/tasks.md

# Run tests
pytest -v

# Validate OpenSpec
openspec validate add-aker-investment-platform --strict
```

## For AI Coding Assistants ðŸ¤–

**Start here:** [`.agentic/README.md`](.agentic/README.md)

This project uses **specification-driven development** with comprehensive context for AI agents:

- ðŸ“˜ **CONTEXT.md** - Project patterns, conventions, and state
- ðŸ’¡ **EXAMPLES.md** - Copy-paste code patterns and templates
- ðŸ“‹ **SCHEMAS.md** - Data models, types, and JSON schemas
- ðŸ”„ **WORKFLOW.md** - TDD workflow and development process

**Development cycle:**

1. Read spec: `openspec/changes/add-aker-investment-platform/specs/<capability>/spec.md`
2. Read context: `.agentic/CONTEXT.md`
3. Check examples: `.agentic/EXAMPLES.md`
4. Write tests (TDD from spec scenarios)
5. Implement following patterns
6. Run quality checks: `pytest && ruff check src && black src --check`
7. Mark complete in `tasks.md`

## Project Structure

```
src/Claude45_Demo/          # Main package
â”œâ”€â”€ data_integration/       # API connectors, caching (40+ sources)
â”œâ”€â”€ market_analysis/        # Supply, employment, demographics scoring
â”œâ”€â”€ geo_analysis/          # Geospatial, outdoor, terrain analysis
â”œâ”€â”€ risk_assessment/       # Wildfire, flood, regulatory risk
â”œâ”€â”€ scoring_engine/        # Weighted scoring and ranking
â””â”€â”€ asset_evaluation/      # Property filtering and ROI

tests/                     # Test suite matching spec scenarios
  â”œâ”€â”€ test_data_integration/
  â”œâ”€â”€ test_market_analysis/
  â”œâ”€â”€ test_geo_analysis/
  â”œâ”€â”€ test_risk_assessment/
  â”œâ”€â”€ test_scoring_engine/
  â””â”€â”€ test_asset_evaluation/

openspec/                  # Specification-driven development
â”œâ”€â”€ project.md            # Project conventions
â”œâ”€â”€ changes/              # Active proposals
â”‚   â””â”€â”€ add-aker-investment-platform/  # Current build
â”‚       â”œâ”€â”€ README.md     # Full proposal overview
â”‚       â”œâ”€â”€ proposal.md   # Why, what, impact
â”‚       â”œâ”€â”€ tasks.md      # 100 implementation tasks
â”‚       â”œâ”€â”€ design.md     # Architecture decisions
â”‚       â””â”€â”€ specs/        # 6 capability specifications
â””â”€â”€ specs/                # Deployed capabilities (empty - greenfield)

.agentic/                 # AI assistant context and patterns
â”œâ”€â”€ README.md             # Overview of agentic resources
â”œâ”€â”€ CONTEXT.md            # Project patterns and conventions
â”œâ”€â”€ EXAMPLES.md           # Copy-paste code templates
â”œâ”€â”€ SCHEMAS.md            # Data models and types
â””â”€â”€ WORKFLOW.md           # TDD workflow and process

scripts/
â”œâ”€â”€ dev_setup.sh          # Automated environment setup
â””â”€â”€ init.sh               # Project initialization (already run)
```

## Technology Stack

- **Core:** Python 3.9+, pandas, NumPy
- **Geospatial:** GeoPandas, Shapely
- **Data Sources:** 40+ APIs (Census, BLS, EPA, FEMA, USGS, OSM, etc.)
- **Caching:** SQLite
- **Testing:** pytest, pytest-cov, pytest-mock
- **Quality:** ruff (linting), black (formatting), mypy (type checking)
- **Visualization:** matplotlib, seaborn, folium
- **Environment:** micromamba

## Key Features (To Be Built)

### Data Integration (40+ Sources)

- Census (ACS, Building Permits, Business Formation)
- BLS (Employment, Wages, QCEW)
- BEA (GDP, Income)
- EPA (Air Quality, Environmental Compliance)
- FEMA (Flood Zones)
- USGS (Elevation, Wildfire, Seismic)
- OpenStreetMap (POIs, Bikeways)
- GTFS (Transit)
- State-specific (CO/UT/ID water rights)

### Market Analysis

- Supply constraint scoring
- Innovation employment analysis (LQ, CAGR)
- Urban convenience (15-minute accessibility)
- Outdoor recreation access
- Demographic and economic trends

### Risk Assessment

- Wildfire (WHP, LANDFIRE, WUI)
- Flood (FEMA zones, BFE)
- Seismic (USGS NSHM)
- Climate hazards (hail, snow, air quality)
- Regulatory friction
- Insurance cost proxies

### Scoring & Ranking

- Weighted composite scores (30/30/20/20)
- Risk multipliers (0.85-1.10)
- Normalization (linear, percentile, log, threshold)
- Sensitivity analysis
- Visualizations (radar, heatmap, choropleth)

### Asset Evaluation

- Product type classification
- Deal archetype (value-add, heavy lift, ground-up)
- Unit mix optimization
- CapEx ROI estimation
- Portfolio fit analysis

## Development Commands

```bash
# Environment
micromamba activate ./.venv

# Testing
pytest                              # Quick test run
pytest -v                           # Verbose
pytest --cov=src --cov-report=html # With coverage
pytest -k test_census              # Run specific tests
pytest -m unit                      # Run unit tests only

# Code Quality
ruff check src tests                # Lint
black src tests                     # Format
mypy src/                          # Type check (if configured)

# OpenSpec
openspec show add-aker-investment-platform  # View proposal
openspec validate --strict                   # Validate all
openspec diff add-aker-investment-platform  # Show changes

# All checks (run before commit)
pytest -v && ruff check src tests && black src tests --check
```

## Git Workflow

```bash
# Create feature branch
git checkout -b cx/implement-task-1.4

# Commit with conventional commits
git commit -m "feat(data): add Census API connector

- Implement CensusConnector with ACS support
- Add caching and rate limiting
- Include tests for all scenarios
- Resolves task 1.4"

# Push and create PR
git push origin cx/implement-task-1.4
```

## Documentation

- **Full Proposal:** [`openspec/changes/add-aker-investment-platform/README.md`](openspec/changes/add-aker-investment-platform/README.md)
- **Implementation Tasks:** [`openspec/changes/add-aker-investment-platform/tasks.md`](openspec/changes/add-aker-investment-platform/tasks.md)
- **Design Decisions:** [`openspec/changes/add-aker-investment-platform/design.md`](openspec/changes/add-aker-investment-platform/design.md)
- **AI Agent Guide:** [`.agentic/README.md`](.agentic/README.md)
- **Code Examples:** [`.agentic/EXAMPLES.md`](.agentic/EXAMPLES.md)
- **Development Workflow:** [`.agentic/WORKFLOW.md`](.agentic/WORKFLOW.md)

## Success Metrics

- âœ… Score 50+ submarkets in <5 minutes (cached)
- âœ… 80%+ test coverage
- âœ… All quality checks pass (pytest, ruff, black)
- âœ… Risk scores validate against insurance premiums
- âœ… Top-scored markets match Aker's portfolio
- âœ… Professional documentation and reports

## Timeline

**MVP: 8-11 weeks**

- Phase 1 (Weeks 1-4): Data Integration
- Phase 2 (Weeks 5-7): Market & Geo Analysis
- Phase 3 (Weeks 8-9): Risk & Scoring
- Phase 4 (Weeks 10-11): Asset Evaluation & Polish

## Contributing

See [`.agentic/WORKFLOW.md`](.agentic/WORKFLOW.md) for the development process.

**Before starting:**

1. Read the relevant OpenSpec requirement
2. Review `.agentic/CONTEXT.md` for patterns
3. Follow TDD workflow (tests first!)
4. Run quality checks before committing
5. Mark tasks complete in `tasks.md`

## License

MIT

## Contact

For questions about Aker Companies' investment thesis: <https://www.akercompanies.com/>

---

**Built with:** OpenSpec (spec-driven development) + Agentic AI best practices
