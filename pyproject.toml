[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "Claude45_Demo"
version = "0.1.0"
description = "Aker Investment Platform - Data-driven residential real estate investment screening for CO/UT/ID markets"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Aker Companies", email = "tech@akercompanies.com" }
]
keywords = ["real estate", "investment", "geospatial", "market analysis", "risk assessment"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core data processing
    "pandas",
    "numpy",

    # Geospatial analysis
    "geopandas",
    "shapely",
    "pyproj",

    # API integration and HTTP
    "requests",
    "urllib3",

    # Data analysis and ML
    "scikit-learn",
    "scipy",

    # Visualization (Core + Web GUI)
    "matplotlib",
    "seaborn",
    "plotly",  # Interactive charts for web GUI

    # Web GUI Framework
    "streamlit",
    "streamlit-extras",

    # Web GUI Data Tables
    "streamlit-aggrid",

    # Web GUI Maps
    "folium",
    "streamlit-folium",

    # Report Generation & Export
    "reportlab",  # PDF generation
    "openpyxl",  # Excel export
    "xlsxwriter",  # Alternative Excel export
    "weasyprint",  # HTML to PDF conversion

    # Backend API (FastAPI)
    "fastapi",
    "uvicorn[standard]",
    "python-jose[cryptography]",  # JWT tokens
    "passlib[bcrypt]",  # Password hashing
    "python-multipart",  # Form data

    # Authentication
    "streamlit-authenticator",

    # CLI interface
    "click",
    "rich",

    # Configuration management
    "python-dotenv",
    "pyyaml",

    # Data validation
    "pydantic",
    "pydantic-settings",

    # Utilities
    "pytz",  # Timezone handling
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-mock",
    "httpx",  # For FastAPI testing

    # Code quality
    "mutmut",  # Mutation testing
    "hypothesis",  # Property-based testing

    # Linting and formatting
    "ruff",
    "black",
    "mypy",

    # Type stubs
    "pandas-stubs",
    "types-requests",
    "types-pyyaml",
]

notebook = [
    # Interactive analysis
    "jupyter",
    "ipykernel",
    "ipywidgets",
]

gui = [
    # Optional GUI enhancements
    "altair",  # Alternative visualization library
    "pydeck",  # Advanced 3D mapping
]

all = [
    "Claude45_Demo[dev,notebook,gui]",
]

[project.scripts]
aker-platform = "Claude45_Demo.cli.main:main"

[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py312"
extend-select = ["I", "E", "W", "F", "B", "Q"]
ignore = ["E501"]  # Line length handled by black
exclude = [
    ".eggs",
    ".git",
    ".venv",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "geopandas.*",
    "shapely.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "streamlit.*",
    "folium.*",
    "reportlab.*",
    "openpyxl.*",
    "xlsxwriter.*",
    "weasyprint.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
check_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    # Coverage options temporarily disabled until pytest-cov is installed
    # "--cov=src/Claude45_Demo",
    # "--cov-report=term-missing",
    # "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests requiring API calls",
    "validation: marks tests that validate against known good data",
    "benchmark: marks tests as performance benchmarks",
    "load: marks tests as load tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
